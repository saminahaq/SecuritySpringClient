

Spring Security *****************************************************************************************************************************

Introduction*********************************************************************************************************************************

[Complete Rejisteration Process]

This application : user register to th esystem through REST API and when user register teh system, user get email to get confirmation of
the account, Also user forget password feature, sent the resset token to set the password, also featute to validate
,rejiteration for the signin account as the Auth O accout ID

so, based to the OAuth2 and openID user can enter the system
e.g login with th egmail, fb etc

Fundamental of security



***************************************Creating project (structure + base classes)***********************************************************
Step # 01
    first create a simple maven project, after we can add securoty project in it.

Step # 02
    now we need to go to the POM.xml and create the modeule for the first project
 so under, ths step first create the security project from "start.spring.io" website
 and put inside the first created simple maven folder thats comes up with th src folder, don't put inside the src folder it should be outside 
 the src folder of the simple maven project
 
 Step# 03 
 Now go to the simple maven project POM.xml file
 and add module, at the very end after the closing tag of teh properties "</properties>"  
  <modules>
        <module>spring-security-client</module>
    </modules>

after adding that POM will complain, so we need to add the pom configuration 
 <packaging>pom</packaging> [very very importnat]
 after version configuration of snapshot
 
*************************************** Project Structure ****************************************

******************Controller: [here we have controllers of all services]**************************

First : Autowired the services of the entity here

Second: Create the REST API request here [within the REST method call the "entity" and assosiate the new method singnature]
                    User user = userServ.registerUser(userModel);
                    
click F2 on method "registerUser(...)" it will create the abstract methos in EntityService [interface class],
than go th ethe EntityServiceImpl class and defined the methods

************************************ Model: [] ****************************************************
Entity: [tables entity POJOs]
entity  -> goes to -> Model

Create Model before the services:
 with the field of entity class and put only these 
 @Data
@AllArgsConstructor
@NoArgsConstructor
[create getter setter etc]
************************************service: *******************************************************
[here we have two things for every entity 1: EntityService 2: EntityServiceImpl]

1: EntityService [Interface]
  here we defined the abstract methods

2: EntityServiceImpl
    here we implement the method that we defined the entityService class
    [that talk with the repostory class]
    Step # 01 
                First, autowired the entityRepository 
    Step # 02
                create the object of the Entity
    Step # 03
                Add entity from model
     for the password encryption create WebSecurity class under config folder
     and add the dependency ["spring security" from start.spring.io] into POM.xml
     
     <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    
    
    and also, for the testing purpose add this as well
    
     <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
      
      
after adding this dependency, we need to go to the webSecurity class and add the annotation

@EnableWebSecurity //First step, after adding dependency add this annotation 
public class WebSecurity {

	/*
	 * Second step access the "PasswordEncoder" interface and create
	 * the passwordEncoder function with the object of the   BCryptPasswordEncoder with strength 11.
	 * 
	 * 
	 * Third step : add annotation @Bean
	 */
		
	
	@Bean
	public PasswordEncoder passwordEncoder() { 
	
		return new BCryptPasswordEncoder(11);
	}
    

Now go back to the ServciceImpl class and autowired the "PasswordEcncoder"

and then setPasswors used user.setPassword(passwordEncoder.encode(userModel.getPassword()));

Step # 04 add into the userReposotory
      userRepository.save(user);
      and return teh user

Step # 05
        go to the UserController and return the "Success"

till now user will be saved into the database, so for the sending confirmation email to user  we need to create the Event

Step # 06
     First we need to create the object of the event
     
    @Autowired
	private ApplicationEventPublisher publisher;

also 
                User user = userService.registerUser(userModel);
	add this :	publisher.publishEvent(null); //now we need to create the event that published

NOw go to the EVENT section of this textfile 
******************************************************Repository: ********************************
[interface of Entity as repository e.g userRepository]
interface class of the EntityRepository extend by the JPAREpository<USER, Long>



*************************************************Config Folder********************************************
[any configurationfile other than the [config.xml and Pom.xml and properties.yaml]]


*************************************************Event Folder: ********************************************

This folder is designed to send the conformation email after successfuly add into the database.

After creating  publisger event and publish in the usercontroller, now we need to create the Event
RegisterationCompleteEvent class  and extend with the ApplicatioEvent


NOw go to the listener folder section of this textfile 
************************************************* listener folder ********************************************
	/*
		 * after the creating the Event "RegisterationCompleteEvent" class, 
		 * after add the listener folder inside the Event folder,
		 * we need to create the "RegisterationCompleteEvent" class 
		 * 
		 */

 stil we don't get login access
 so add these  into the websecurity
 
 private static final String[] WHITE_LIST_URLS = {
            "/hello",
            "/register",
            "/verifyRegistration*",
            "/resendVerifyToken*"
    };
 @Bean
	public PasswordEncoder passwordEncoder() { 
	
		return new BCryptPasswordEncoder(11);
	}
	
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		http.cors()
			.and()
			.csrf()
			.disable()
			.authorizeHttpRequests()
			.antMatchers(WHITE_LIST_URLS).permitAll();
		
		 return http.build();
	}

***************************************Registration of user (saving, password encoding)******************************************************

afterimplementing there is url appearsin consloe 
http://localhost:8082/verifyRegistration?token=6be6fe40-ea09-4492-ba19-aed112b31e32

test in the browser : wil see user verified
***************************************Send email to user for activation (event, listener, token)********************************************

check rest of the Api with 

/verifyRegistration +Token 

http://localhost:8082/verifyRegistration?token=5f5cba36-b377-4de6-b6e7-8d7502d43073


***************************************Resend token (for expired)****************************************************************************
***************************************Reset password (for forgot)***************************************************************************

/resetPassword
http://localhost:8082/resetPassword   [only do't include token ]
post man 
{
     "email": "abc@gmail.com"
}
provide email

receivied savepassword Url, click on that and give body to postman 

{
    "newPassword" : "123vfr"
}
 will show "Password Reset Successfully"  double check in databse 

***************************************Change password (with old)****************************************************************************
postman => http://localhost:8082/changePassword

{
    "email":"aty@gmail.com",
    "oldPassword":"123abc",
    "newPassword":"hjsadghjdgajgd"
}

***************************************Introduction (OAuth 2.0 )*****************************************************************************

generate the user
https://www.oauth.com/playground

***************************************Creating a project (authorization server)*************************************************************
First generate authorization code from the https://www.oauth.com/playground select -> Authorization Code -> follow the instruction till
get the "Token Endpoint Response"

Create "Oauth-Authorozation-Server" application

add dependency of OAuth

<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>

***************************************CustomUserDetailService implementation****************************************************************
***************************************Configuration for authorization server implementation*************************************************
***************************************Basic Spring Security configuration*******************************************************************
***************************************Register client***************************************************************************************
***************************************WebSecurity configuration*****************************************************************************